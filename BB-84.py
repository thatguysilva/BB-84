# -*- coding: utf-8 -*-
"""aulabb84.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SAiav_7QqPnkKuGaDFGAh2OvBJ2JmlKV
"""

pip install qiskit

pip install pylatexenc

pip install qiskit-aer

from qiskit import QuantumCircuit

qc = QuantumCircuit(1, 1)

qc.draw()

qc.measure(0, 0)

display(qc.draw(output='mpl'))

from qiskit import Aer, execute
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

simulator = Aer.get_backend('qasm_simulator')
result = execute(qc, simulator, shots=1024).result()

# Get the histogram data
counts = result.get_counts(qc)

# Plot the histogram
plot_histogram(counts)

qc2 = QuantumCircuit(1, 1)

qc2.x(0)

qc2.draw("mpl")

qc2.measure(0, 0)
qc2.draw("mpl")

simulator = Aer.get_backend('qasm_simulator')
result = execute(qc2, simulator, shots=1024).result()

# Get the histogram data
counts = result.get_counts(qc2)

# Plot the histogram
plot_histogram(counts)

qc3 = QuantumCircuit(1, 1)

qc3.h(0)

qc3.draw("mpl")

qc3.measure(0, 0)
qc3.draw("mpl")

pip install qiskit-ibmq-provider

from qiskit import IBMQ, execute
from qiskit.visualization import plot_histogram
from qiskit.providers.ibmq import least_busy

IBMQ.save_account('yourtokenhere')
IBMQ.load_account()


# Checking the backend and choosing the least busy

provider = IBMQ.get_provider(hub='ibm-q')

backend = least_busy(provider.backends(filters=lambda x: x.configuration().n_qubits >= 5
                                       and not x.configuration().simulator
                                       and x.status().operational==True))

print("We'll run on:", backend)

result = execute(qc3, backend, shots=1024).result()

# Get the histogram data
counts = result.get_counts(qc3)

# Plot the histogram
plot_histogram(counts)

qcf01 = QuantumCircuit(5, 5)
qcf01.draw("mpl")

qcf01.x(0)
qcf01.h(0)
qcf01.h(1)
qcf01.x(3)
qcf01.h(4)
qcf01.draw("mpl")

qcf01.barrier()
qcf01.draw("mpl")

qcf01.i(0)
qcf01.h(1)
qcf01.h(2)
qcf01.i(3)
qcf01.i(4)
qcf01.draw("mpl")

qcf01.measure(0, 0)
qcf01.measure(1, 1)
qcf01.measure(2, 2)
qcf01.measure(3, 3)
qcf01.measure(4, 4)
qcf01.draw("mpl")

#SIMULATOR

simulator = Aer.get_backend('qasm_simulator')
result = execute(qcf01, simulator, shots=1024).result()

# Get the histogram data
counts = result.get_counts(qcf01)

# Plot the histogram
plot_histogram(counts)

qcf2 = QuantumCircuit(5, 5)
qcf2.draw("mpl")



qcf2.x(0)
qcf2.h(0)
qcf2.h(1)
qcf2.x(3)
qcf2.h(4)
qcf2.draw("mpl")

qcf2.barrier()

qcf2.draw("mpl")

qcf2.h(0)
qcf2.h(1)
qcf2.i(2)
qcf2.i(3)
qcf2.h(4)
qcf2.barrier()

qcf2.draw("mpl")

qcf2.i(0)
qcf2.h(1)
qcf2.h(2)
qcf2.i(3)
qcf2.i(4)
qcf2.draw("mpl")

qcf2.measure(0, 0)
qcf2.measure(1, 1)
qcf2.measure(2, 2)
qcf2.measure(3, 3)
qcf2.measure(4, 4)
qcf2.draw("mpl")

result = execute(qcf2, backend, shots=1024).result()

# Get the histogram data
counts = result.get_counts(qcf2)

# Plot the histogram
plot_histogram(counts)

